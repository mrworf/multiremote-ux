/**
 * This class allow for easy handling of async calls
 */

var ResultWrapper = function(ux, timeout) {
  this.cmdmap = {};
  this.ux = ux;
  this.timeout = timeout;

  /**
   * Handles the results generated by functions in MultiRemoteClient.
   * If there is a mapping between ID and function, it's carried out,
   * otherwise nothing happens.
   *
   * @param id The ID of the command which finished
   * @param success true/false
   * @param data Any resulting data (or null)
   */
  this.handler = function(id, success, data) {
    if (id in this.cmdmap) {
      state = this.cmdmap[id];
      state.handler(success, data);
      if (state.timeout) {
        clearTimeout(state.timerid);
        this.ux.showBusyIndicator(false);
        this.ux.blockUI(false);
      }
      delete this.cmdmap[id];
    }
  }

  /**
   * Takes any MultiRemoteCommand and maps a function to be called
   * once the function returns. This is necessary since a lot of
   * functions are async and will return before they're done.
   * This simplifies the use of these functions.
   *
   * @param funcCommand Must return a multiremoteclient async id
   * @param funcFollowUp The function which should be called when command finishes
   * @param useTimeout
   */
  this.wrap = function(funcCommand, funcFollowUp, useTimeout) {
    id = funcCommand();
    self2 = this;
    this.cmdmap[id] = {handler: funcFollowUp, timeout: useTimeout, timerid: 0};

    if (useTimeout) {
      this.cmdmap[id].timerid = setTimeout(function(){self2.ux.showBusyIndicator(true);}, this.timeout);
      this.ux.blockUI(true);
    }
  }
}
